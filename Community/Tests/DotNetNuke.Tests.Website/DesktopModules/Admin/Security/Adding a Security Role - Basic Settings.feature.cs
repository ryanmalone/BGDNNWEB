// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18010
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DotNetNuke.Tests.Website.DesktopModules.Admin.Security
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Adding a Security Role - Basic Settings")]
    public partial class AddingASecurityRole_BasicSettingsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Adding a Security Role - Basic Settings.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Adding a Security Role - Basic Settings", "In order to add a new role to my website\r\nAs a Module Editor\r\nI want to be able t" +
                    "o add a new security role with basic information only", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("How to add a basic security role to a site using the Security Roles module")]
        [NUnit.Framework.TestCaseAttribute("deadmau5", "password", "Administrators", "Sample Role", "Describe this role", "True", "False", "SecurityRole", "Approved", null)]
        [NUnit.Framework.TestCaseAttribute("philt3r", "password", "Administrators", "Test Role", "Describe that role", "False", "False", "SocialGroup", "Pemdimg", null)]
        public virtual void HowToAddABasicSecurityRoleToASiteUsingTheSecurityRolesModule(string scenarioUserName, string scenarioPassword, string scenarioRole, string securityRole, string description, string publicRole, string autoAssignment, string securityMode, string status, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("How to add a basic security role to a site using the Security Roles module", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Role",
                        "Permission",
                        "Value"});
            table1.AddRow(new string[] {
                        "Administrators",
                        "View",
                        "Allowed"});
#line 7
 testRunner.Given("There is a Page called Security Roles with these permissions", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Role",
                        "Permission",
                        "Value"});
            table2.AddRow(new string[] {
                        "Administrators",
                        "View",
                        "Allowed"});
#line 10
 testRunner.And("There is a Security Roles module on the page with these permissions", ((string)(null)), table2, "And ");
#line 13
 testRunner.And(string.Format("Login as UID={0} PWD={1} Role={2}", scenarioUserName, scenarioPassword, scenarioRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And(string.Format("There is no role {0}", securityRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.When("Click the Add New Role link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.And("Select the Basic Settings tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And(string.Format("In the Role Name text box, enter a name for the {0}", securityRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.And(string.Format("In the Description text box, enter a brief description of this role {0}", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.And("At Role Group, select a group for this role if desired", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.And(string.Format("At Public Role, select {0}", publicRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And(string.Format("At Auto Assignment select {0}", autoAssignment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And(string.Format("At Security Mode select {0}", securityMode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And(string.Format("At Status select {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.And("Click the Security Role Update Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
