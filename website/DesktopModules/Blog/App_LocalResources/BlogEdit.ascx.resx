<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblTitle.Text" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="lblDescription.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;Blog - Edit Blog&lt;/h1&gt;
&lt;p&gt;These options control the main blog features.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Title&lt;/b&gt;&lt;br /&gt;This is the display title for your blog. It will display at the top of your Post list and in the blog directory.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Description&lt;/b&gt;&lt;br /&gt;This is a brief summary description of your blog. It's a good place to describe your intentions with your blog and what information readers can expect.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Make this blog public&lt;/b&gt;&lt;br /&gt;If checked, all the visitors who have view permissions to the page will be able to read the blog. If unchecked, the blog will be visible only to the blog owner.&lt;/p&gt;&lt;p&gt;&lt;b&gt;When displaying your identity use&lt;/b&gt;&lt;br /&gt;This setting controls the name that will be displayed as the author of the content. Two options are available: the DNN user name or the user's full name.&lt;/p&gt;&lt;p&gt;&lt;b&gt;MetaWeblog Options&lt;/b&gt;&lt;br /&gt;The displayed URL is to be used to connect to your blog using a MetaWeblog enabled client such as Windows Live Writer or Word 2007. The tabid parameter may be changed as needed if this blog appears on a different tab.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Comment Options&lt;/b&gt;&lt;br /&gt;These options control the comment related settings. Comments may be added by registered users, Unauthenticated users or from other blogs as Trackback comments. The blog owner has three options: Allow, Disallow or Require Approval. If Allow is checked, the comments will be displayed as soon as they are added. If Disallow is checked, comments will be disabled. If Require Approval is checked, the comments will need to be approved by the blog owner before being displayed.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Send mail notification after comments and trackbacks are posted&lt;/b&gt;&lt;br /&gt;If checked, the blog owner will receive an email whenever a comment is added to a blog post.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Use CAPTCHA for comments&lt;/b&gt;&lt;br /&gt;If checked, this will enable a security check when adding comments to avoid spamming.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Trackback Auto Discovery (Client Mode)&lt;/b&gt;&lt;br /&gt;If checked, the module will scan the Post post when it is added in search of trackback links and attempt to send them a trackback comment.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Syndication Options&lt;/b&gt;&lt;br /&gt;Here the blog owner can decide if make an RSS feed available to the visitors for the blog. If checked, an RSS icon with the corresponding link will be displayed besides the blog title in the blog list. The blog owner may also decide to include an email in the "ManagingEditor" field of the RSS feed.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Date and Time Options&lt;/b&gt;&lt;br /&gt;These options control how date and time are displayed within your blog. This setting effects all categories and Posts within your blog.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Regenerate Blog PermaLinks&lt;/b&gt;&lt;br /&gt;This link can be used after the Friendly URLs setting has been changed for the site. When clicked, the module will scann all the Posts and attempt to regenerate all the permalinks according to any cahnges to the Friendly URLs settings and to the Post titles.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Child Blogs&lt;/b&gt;&lt;br /&gt;If you would like to break your blog up into different categories, this is where you define them. Having Child-Blogs allows you to create sub-blogs within your blog. Each one has its own options for publication and can be syndicated separately from your root blog.&lt;/p&gt;</value>
  </data>
  <data name="lblSyndicate.Text" xml:space="preserve">
    <value>Syndicate Blog</value>
  </data>
  <data name="lblPublic.Text" xml:space="preserve">
    <value>Make Public</value>
  </data>
  <data name="lblTitle.Help" xml:space="preserve">
    <value>This is the display title for your blog. It will display at the top of your 
			Post list and in the blog directory.</value>
  </data>
  <data name="lblSyndicationEmail.Help" xml:space="preserve">
    <value>Use this email for the "Managing Editor" rss field.</value>
  </data>
  <data name="lblDescription.Help" xml:space="preserve">
    <value>This is a brief summary description of your blog. It's a good place to describe 
			your intentions with your blog and what information readers can expect.</value>
  </data>
  <data name="lblMetaWeblogNotAvailable.Text" xml:space="preserve">
    <value>MetaWeblog clients integration has been disabled</value>
  </data>
  <data name="lblPublic.Help" xml:space="preserve">
    <value>If checked, site visitors will be able to view your blog Posts (if they can view the blog page/module). </value>
  </data>
  <data name="lblSyndicate.Help" xml:space="preserve">
    <value>If checked, the blog will be available to other site visitors via RSS.</value>
  </data>
  <data name="lblSyndicationEmail.Text" xml:space="preserve">
    <value>Syndication Email</value>
  </data>
  <data name="ControlTitle_blogedit.Text" xml:space="preserve">
    <value>Edit Blog</value>
  </data>
  <data name="cmdImageRemove.Text" xml:space="preserve">
    <value>Remove Image</value>
  </data>
  <data name="lblImage.Help" xml:space="preserve">
    <value>You can specify an image to be associated with this blog.</value>
  </data>
  <data name="lblImage.Text" xml:space="preserve">
    <value>Image</value>
  </data>
  <data name="lblIncludeImagesInFeed.Help" xml:space="preserve">
    <value>When selected then the RSS feed from the module will include links to the images you include for the blog and the blog posts. The requests for these images are not authenticated. I.e. anyone could potentially see those images if they knew the link.</value>
  </data>
  <data name="lblIncludeImagesInFeed.Text" xml:space="preserve">
    <value>Include Images In Feed</value>
  </data>
  <data name="lblMustApproveGhostPosts.Help" xml:space="preserve">
    <value>If selected all posts written by someone else than the blog's owner must be approved by someone who has approval permissions or the owner.</value>
  </data>
  <data name="lblMustApproveGhostPosts.Text" xml:space="preserve">
    <value>Must Approve Ghostwritten Posts</value>
  </data>
  <data name="lblPermissions.Help" xml:space="preserve">
    <value>Specify the permissions others have for this blog</value>
  </data>
  <data name="lblPermissions.Text" xml:space="preserve">
    <value>Permissions</value>
  </data>
  <data name="lblPublishAsOwner.Help" xml:space="preserve">
    <value>Is selected all posts written by ghost writers will be published as if they were written by the blog's owner</value>
  </data>
  <data name="lblPublishAsOwner.Text" xml:space="preserve">
    <value>Publish As Owner</value>
  </data>
  <data name="lblLocale.Help" xml:space="preserve">
    <value>Select the language posts for this blog will be written in</value>
  </data>
  <data name="lblLocale.Text" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="lblCopyright.Help" xml:space="preserve">
    <value>If you wish to specify a copyright for the posts in this blog, you can specify one here. Add [year] to add the year in this text.</value>
  </data>
  <data name="lblCopyright.Text" xml:space="preserve">
    <value>Copyright</value>
  </data>
  <data name="lblIncludeAuthorInFeed.Help" xml:space="preserve">
    <value>If selected the name and email address of the author of articles will be sent in any RSS feed that includes posts from this blog</value>
  </data>
  <data name="lblIncludeAuthorInFeed.Text" xml:space="preserve">
    <value>Include Author in Rss Feed</value>
  </data>
  <data name="lblFullLocalization.Help" xml:space="preserve">
    <value>When checked every post is assumed to be translated into all portal languages and the user will see edit boxes for title, summary and post for every language. If left unchecked every blog post can be labeled in its own language and will not have translations.</value>
  </data>
  <data name="lblFullLocalization.Text" xml:space="preserve">
    <value>Full Localization</value>
  </data>
  <data name="lblPingbacks.Help" xml:space="preserve">
    <value>Pingbacks are sent automatically upon posting to receiving blogs to notify that they've been mentioned. It is generally more secure (i.e. less prone to spam) than trackbacks. It's a great way to boost your search engine visibility.</value>
  </data>
  <data name="lblPingbacks.Text" xml:space="preserve">
    <value>Pingbacks</value>
  </data>
  <data name="lblTrackbacks.Help" xml:space="preserve">
    <value>Like pingbacks, trackbacks are sent automatically upon posting to receiving blogs to notify that they've been mentioned. Trackbacks generally less secure (i.e. more prone to spam) than pingbacks. It's a great way to boost your search engine visibility.</value>
  </data>
  <data name="lblTrackbacks.Text" xml:space="preserve">
    <value>Trackbacks</value>
  </data>
  <data name="Receive.Text" xml:space="preserve">
    <value>Receive</value>
  </data>
  <data name="Send.Text" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="AutoApprove.Text" xml:space="preserve">
    <value>Auto Approve</value>
  </data>
  <data name="Title.Required" xml:space="preserve">
    <value>A title for the blog is required</value>
  </data>
</root>